#!/usr/bin/env node

const {connect} = require('../../index')
const {readFileSync} = require("fs")

if (!process.argv[3]) {
  console.log("Usage: upload [local file] [remote file]")
  console.log("Example: upload ./test.xml /db/test.xml")
  process.exit(9)
}

// read parameters
const localFilePath = process.argv[2]
const remoteFilePath = process.argv[3]

// read connection options from ENV
const user = process.env.EXISTDB_USER || 'admin'
const pass = process.env.EXISTDB_PASS || ''
const server = process.env.EXISTDB_SERVER || 'http://localhost:8080'
const { port, hostname, protocol } = new URL(server)
const secure = protocol === 'https:'

const connectionOptions = {
  rejectUnauthorized: secure && !(hostname === 'localhost'),
  secure,
  basic_auth: { user, pass },
  host: hostname,
  port
}

;(async function () {
  try {
    process.stdout.write(`Upload ${localFilePath} to ${remoteFilePath}\n`)
    const db = connect(connectionOptions)
    const fileContents = readFileSync(localFilePath);
    process.stdout.write("uploading...")
    process.stdout.clearLine()
    process.stdout.cursorTo(0)

    process.stdout.write("parsing...")
    const fileHandle = await db.documents.upload(fileContents)
    await db.documents.parseLocal(fileHandle, remoteFilePath, {})
    process.stdout.clearLine()
    process.stdout.cursorTo(0)
    console.log("uploaded to", server, "✔︎")
    process.exit(0)
  }
  catch (e) { 
    let message = e.faultString ? e.faultString : e.message
    console.error(message)
    process.exit(1)
  }
})()
