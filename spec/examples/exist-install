#!/usr/bin/env node

const {connect} = require('../../index')
const {readFileSync} = require("fs")
const {basename} = require("path")

// read connection options from ENV
const connectionOptions = require('../connection')

function usage() {
  console.log("Usage: exist-install [local path to XAR]")
  console.log("Example: exist-install ./my-app.xar")
  process.exit(9)
}

function serverName(db) {
  const {isSecure, options} = db.client

  const protocol = `http${isSecure ? 's' : ''}:` 
  const isStdPort =
      (isSecure && options.port === 443) ||
      (!isSecure && options.port === 80)

  if (isStdPort) {
    return `${protocol}//${options.host}`
  }
  return `${protocol}//${options.host}:${options.port}`
}

async function install (connectionOptions, localFilePath) {
  try {
    const db = connect(connectionOptions)
    const xarName = basename(localFilePath)
    const contents = readFileSync(localFilePath)

    process.stdout.write(`Install ${xarName} on ${serverName(db)}\n`)

    process.stdout.write("uploading...")
    const uploadResult = await db.app.upload(contents, xarName)
    if (!uploadResult.success) {
      throw new Error(uploadResult.error)
    }

    process.stdout.clearLine()
    process.stdout.cursorTo(0)
    process.stdout.write("✔︎ uploaded\n");

    process.stdout.write("installing...")
    const installResult = await db.app.install(xarName)

    if (!installResult.success) {
      throw new Error(installResult.error)
    }

    process.stdout.clearLine()
    process.stdout.cursorTo(0)
    const installationMessage = installResult.result.update ? "updated" : "installed"
    process.stdout.write(`✔︎ ${installationMessage}\n`);

    return 0
  }
  catch (e) { 
    let message = e.faultString ? e.faultString : e.message
    console.error(message)
    return 1
  }
}

// main

if (!process.argv[2]){ 
  console.error("No package given")
  usage()
}

if (!process.argv[2].match(/\.xar$/i)) {
  console.error("Package must have .xar file extension")
  usage()
}

install(connectionOptions, process.argv[2])
  .then(code => process.exit(code))
  .catch(code => process.exit(code))

