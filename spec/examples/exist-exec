#!/usr/bin/env node

const {argv} = require('process'); // eslint-disable-line node/prefer-global/process
const {connect} = require('../../index')
const {readFileSync} = require("fs")

// read connection options from ENV
const connectionOptions = require('../connection')

function parseVars (raw) {
    let stringified = raw
    if (raw === '-') {
        stringified = readFileSync(process.stdin.fd)
    }
    if (stringified) {
        return JSON.parse(stringified)
    }
    return {}
}

function getQuery (file, query) {
    const hasQueryFile = file && file !== ''
    const hasQueryString = query && query !== ''
    
    if (!hasQueryFile && !hasQueryString) {
        throw Error('No query given, nothing to do!')
    }

    if (hasQueryFile && hasQueryString) {
        throw Error('Cannot use both query string and query file')
    }

    // read query from standard input
    if (query === '-') {
        return readFileSync(process.stdin.fd, 'utf-8')
    }

    if (hasQueryString) {
        return query
    }

    // read query file content
    let path = file

    // from standard input
    if (file === '-') {
        path = readFileSync(process.stdin.fd, 'utf-8').trim()
    }

    return readFileSync(path, 'utf-8')
}

async function execute(db, query, variables) {
    const result = await db.queries.readAll(query, { variables })
    console.log(result.pages.toString())
    return 0
}

async function run() {
    const cli = require('yargs')
    .command('$0', 'Execute queries in an exist-db', (yargs) => {
      yargs.demandCommand(0, 1).usage(`
Usage:
    exist-exec [options] [query]`);
    })
    .option('f', {
        alias: 'file',
        describe: 'Read query File (pass - to read from standard input)'
    })
    .option('b', {
        alias: 'bind',
        describe: 'Bind variables (either as JSON string or - to read from standard input)', 
        coerce: parseVars, 
        default: () => {}
    })
    .option('h', {alias: 'help'})
    .nargs({'f': 1,'b': 1})
    .strict(false)
    .exitProcess(false);
  
    try {
      const parsed = cli.parse(argv.slice(2))
      if (Boolean(parsed.help) || Boolean(parsed.version)) {
        return 0
      }
      const {file, bind} = parsed

      const query = getQuery(file, parsed._[0])
      const db = connect(connectionOptions)

      return await execute(db, query, bind)
    }
    catch (error) {
        if (
            error.code === 'EPROTO' ||
            error.code === 'ECONNREFUSED' ||
            error.code === 'ECONNRESET'
        ) {
            console.error(`Could not connect to DB at ${serverName(db)} - Reason: ${error.code}`)
            return 1
        }
        if (error.name !== 'YError') {
            const msg = error.message ? error.message : error.faultString ? error.faultString : error
            console.error(msg)
        }
        return 1
    }
  }
  
run()
    .then((exitCode) => {
        process.exitCode = exitCode
    })
    .catch((error) => {
        console.error(error)
        process.exitCode = 1
    })
